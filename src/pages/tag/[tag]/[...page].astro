---
import {getAllPosts} from "../../../utils";
import BaseLayout from "@layouts/BaseLayout.astro";
import HorizontalCard from "@components/HorizontalCard.astro";
import { getCollection } from "astro:content";
import suppDesc from "../../../utils/suppDesc";
import createSlug from "../../../utils/createSlug";
import Pagination from "../../../components/Pagination.astro";
import getHeroImageLinkFromMd from "../../../utils/getHeroImageLinkFromMd";

export async function getStaticPaths({ paginate }) {
  var all_posts = await getAllPosts();
  all_posts = all_posts.filter(item => !item.data.auth)
  // all_posts.sort((a, b) => b.data.pubDatetime.valueOf() - a.data.pubDatetime.valueOf());
  const all_tags = all_posts.flatMap((post) => {
    return post.data.tags || [];
  });

  return all_tags.flatMap((tag) => {
    const filtred_posts = all_posts.filter((post) => {
      return post.data.tags?.includes(tag);
    });
    return paginate(filtred_posts, {
      params: { tag },
      pageSize: 10,
    });
  });
}

const { page } = Astro.props;
const params = Astro.params;
---

<BaseLayout title={"Blog - " + params.tag} sideBarActiveItemID="blog">
  <div class="mb-5">
    <div class="text-3xl w-full font-bold">Blog - {params.tag}</div>
  </div>
  {
    page.data.length === 0 ? (
      <div class="bg-base-200 border-l-4 border-secondary w-full p-4 min-w-full">
        <p class="font-bold">Sorry!</p>
        <p>There are no blog posts to show at the moment. Check back later!</p>
      </div>
    ) : (
      <ul>
        {page.data.map((post) => (
          <>
            <HorizontalCard
              title={post.data.title}
              img={getHeroImageLinkFromMd(post)}
              desc={suppDesc(post.data.description, post.body)}
              url={createSlug(post)}
              target="_self"
              badge={post.data.badge}
              tags={post.data.tags}
            />
            <div class="divider my-0" />
          </>
        ))}
      </ul>
    )
  }

      <div class="flex justify-between mt-2 float-right">
          {
              page.lastPage > 1 ? (
                      <Pagination
                              firstPage={page.url.prev ? "/"+page.url.current.split("/")[1]: null}
                              previousPage={page.url.prev ? page.url.prev : null}
                              nextPage={page.url.next ? page.url.next : null}
                              lastPage={page.url.next ? page.lastPage : null}
                              currentPage={page.currentPage}
                              totalPages={page.lastPage}
                      />
              ) : (
                      <div />
              )
          }
      </div>
</BaseLayout>
